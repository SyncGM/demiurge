package com.github.sesvxace.demiurge;

import java.util.HashMap;
import javax.swing.DefaultListModel;
import javax.swing.KeyStroke;

public class TagCreatorDialog extends javax.swing.JDialog {
  private boolean okClicked;
  private final HashMap parameters;
  private final ListDeleteAction deleteItem = new ListDeleteAction();

  public TagCreatorDialog(javax.swing.JDialog parent, boolean modal) {
    super(parent, modal);
    initComponents();
    okClicked = false;
    parameters = new HashMap();
    pack();
    setLocationRelativeTo(parent);
  }
  
  public TagCreatorDialog(javax.swing.JDialog parent, boolean modal,
                                                                Object[] data) {
    super(parent, modal);
    initComponents();
    okClicked = false;
    nameTextField.setText((String) data[0]);
    descriptionTextField.setText((String) data[1]);
    typeTextField.setText((String) data[2]);
    parameters = (HashMap) data[3];
    tagConverterField.setText((String) data[4]);
    regExpField.setText((String) data[5]);
    repeatableBox.setSelected((boolean) data[6]);
    categoryField.setText((String) data[7]);
    int i = 0;
    DefaultListModel model = (DefaultListModel) parameterList.getModel();
    while (parameters.get(i) != null && i < model.getSize()) {
      model.remove(i);
      model.add(i, ((Object[]) parameters.get(i))[0]);
      i++;
    }
    if (i >= 5) model.add(i, " ");
    pack();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    typeButtons = new javax.swing.ButtonGroup();
    nameLabel = new javax.swing.JLabel();
    nameTextField = new javax.swing.JTextField();
    jLabel3 = new javax.swing.JLabel();
    descriptionTextField = new javax.swing.JTextField();
    jLabel4 = new javax.swing.JLabel();
    typeTextField = new javax.swing.JTextField();
    jLabel1 = new javax.swing.JLabel();
    jScrollPane1 = new javax.swing.JScrollPane();
    parameterList = new javax.swing.JList();
    parameterList.setCellRenderer(new ListBackground());
    parameterList.getInputMap().put(KeyStroke.getKeyStroke("DELETE"), "deleteItem");
    parameterList.getActionMap().put("deleteItem", deleteItem);
    DefaultListModel model = new DefaultListModel();
    for (int i = 0; i < 5; i++)
    model.add(model.getSize(), " ");
    jLabel2 = new javax.swing.JLabel();
    jScrollPane2 = new javax.swing.JScrollPane();
    tagConverterField = new javax.swing.JTextArea();
    jLabel5 = new javax.swing.JLabel();
    regExpField = new javax.swing.JTextField();
    jButton1 = new javax.swing.JButton();
    jLabel6 = new javax.swing.JLabel();
    repeatableBox = new javax.swing.JCheckBox();
    jLabel7 = new javax.swing.JLabel();
    categoryField = new javax.swing.JTextField();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("Add Tag");
    setMaximumSize(new java.awt.Dimension(480, 420));
    setMinimumSize(new java.awt.Dimension(480, 420));
    setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
    setName("parameterDialog"); // NOI18N
    setPreferredSize(new java.awt.Dimension(480, 420));
    setResizable(false);
    getContentPane().setLayout(new java.awt.GridBagLayout());

    nameLabel.setText("Name");
    nameLabel.setToolTipText("The name of the tag.");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.weighty = 0.2;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    getContentPane().add(nameLabel, gridBagConstraints);

    nameTextField.setToolTipText("The name of the tag.");
    nameTextField.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        nameTextFieldActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 0.2;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    getContentPane().add(nameTextField, gridBagConstraints);

    jLabel3.setText("Description");
    jLabel3.setToolTipText("A description of the tag.");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.weighty = 0.2;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    getContentPane().add(jLabel3, gridBagConstraints);

    descriptionTextField.setToolTipText("A description of the tag.");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 0.2;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    getContentPane().add(descriptionTextField, gridBagConstraints);

    jLabel4.setText("Type");
    jLabel4.setToolTipText("<html>The type of tag it is.<br>\nex:<br>\nBattle<br>\nBestiary<br>\nPersonal</html>");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.weighty = 0.2;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    getContentPane().add(jLabel4, gridBagConstraints);

    typeTextField.setToolTipText("<html>The type of tag it is.<br> ex:<br> Battle<br> Bestiary<br> Personal</html>");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 0.2;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    getContentPane().add(typeTextField, gridBagConstraints);

    jLabel1.setText("Parameters");
    jLabel1.setToolTipText("The parameters of the tag.");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    getContentPane().add(jLabel1, gridBagConstraints);

    parameterList.setModel(model);
    parameterList.setToolTipText("The parameters of the tag.");
    parameterList.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        parameterListMouseClicked(evt);
      }
    });
    jScrollPane1.setViewportView(parameterList);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 0.6;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    getContentPane().add(jScrollPane1, gridBagConstraints);

    jLabel2.setText("Tag Converter");
    jLabel2.setToolTipText("<html>The Ruby scriptlet used to convert parameters to tags.<br> Access parameters with $1, $2, $3, and so on.<br> ex:<br> \"/&lt;Thing: $1, $2&gt;\"</html>");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 7;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    getContentPane().add(jLabel2, gridBagConstraints);

    tagConverterField.setColumns(20);
    tagConverterField.setRows(3);
    tagConverterField.setTabSize(2);
    tagConverterField.setToolTipText("<html>The Ruby scriptlet used to convert parameters to tags.<br> Access parameters with $1, $2, $3, and so on.<br> ex:<br> \"/&lt;Thing: $1, $2&gt;\"</html>");
    jScrollPane2.setViewportView(tagConverterField);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 8;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 0.4;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    getContentPane().add(jScrollPane2, gridBagConstraints);

    jLabel5.setText("RegExp");
    jLabel5.setToolTipText("<html>The regular expression used to read the tag in the first place.<br>\nThis can be found in the source script and will look something like this:<br>\n/&lt;Thing: Stuff&gt;/<br>\nMake sure to include the slashes, as well as anything following them,<br>\nsuch as in the example below:<br>\n/&lt;Thing: Stuff&gt;/i</html>");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 9;
    gridBagConstraints.weighty = 0.2;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    getContentPane().add(jLabel5, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 9;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 0.2;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    getContentPane().add(regExpField, gridBagConstraints);

    jButton1.setText("Done");
    jButton1.setToolTipText("Finish and add the tag to the plugin.");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton1ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 10;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    getContentPane().add(jButton1, gridBagConstraints);

    jLabel6.setText("Repeatable?");
    jLabel6.setToolTipText("Whether or not the tag is repeatable.");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.weighty = 0.2;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    getContentPane().add(jLabel6, gridBagConstraints);

    repeatableBox.setToolTipText("Whether or not the tag is repeatable.");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weighty = 0.2;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    getContentPane().add(repeatableBox, gridBagConstraints);

    jLabel7.setText("Category");
    jLabel7.setToolTipText("The tag's category.");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.weighty = 0.2;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    getContentPane().add(jLabel7, gridBagConstraints);

    categoryField.setToolTipText("The tag's category.");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 0.2;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    getContentPane().add(categoryField, gridBagConstraints);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  public boolean getOKClicked() {
    return okClicked;
  }
  
  public Object[] getTag() {
    Object[] r = { nameTextField.getText(), descriptionTextField.getText(), 
               typeTextField.getText(), parameters, tagConverterField.getText(),
                              regExpField.getText(), repeatableBox.isSelected(),
                                                      categoryField.getText() };
    return r;
  }
  
  private void nameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTextFieldActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_nameTextFieldActionPerformed

  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    okClicked = true;
    dispose();
  }//GEN-LAST:event_jButton1ActionPerformed

  private void parameterListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_parameterListMouseClicked
    if (evt.getClickCount() >= 2) {
      ParameterCreatorDialog param;
      int index = parameterList.getSelectedIndex();
      if (parameters.get(index) != null) {
        param = new ParameterCreatorDialog(this, true,
                                              (Object[]) parameters.get(index));
      } else param = new ParameterCreatorDialog(this, true);
      param.setVisible(true);
      if (param.getOKClicked()) {
        Object[] parameter = param.getParameter();
        if (parameter[0].equals("")) return;
        DefaultListModel model = ((DefaultListModel) parameterList.getModel());
        if (parameterList.getSelectedValue().equals(" ")) {
          int i = model.indexOf(" ");
          parameters.put(i, parameter);
          if (i == model.getSize() - 1) {
            model.add(i, ((Object[]) parameters.get(i))[0]);
          } else {
            model.remove(i);
            model.add(i, ((Object[]) parameters.get(i))[0]);
          }
        } else {
          parameters.put(index, parameter);
          model.remove(index);
          model.add(index, ((Object[]) parameters.get(index))[0]);
        }
      }
    }
  }//GEN-LAST:event_parameterListMouseClicked

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTextField categoryField;
  private javax.swing.JTextField descriptionTextField;
  private javax.swing.JButton jButton1;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JLabel jLabel7;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JLabel nameLabel;
  private javax.swing.JTextField nameTextField;
  private javax.swing.JList parameterList;
  private javax.swing.JTextField regExpField;
  private javax.swing.JCheckBox repeatableBox;
  private javax.swing.JTextArea tagConverterField;
  private javax.swing.ButtonGroup typeButtons;
  private javax.swing.JTextField typeTextField;
  // End of variables declaration//GEN-END:variables
}
